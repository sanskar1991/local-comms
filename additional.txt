Vagrant:
vagrant up: run the VM
vagrant ssh
cd /vagrant
source ~/virtual-env/bin/activate
cd profiles_project

python manage.py runserver 0.0.0.0:8000
open this http://127.0.0.1:8000/ in the browser

"""
Django's default user class uses username and password for login.
But if you want to use email instead of username then you have to customize the user class.
You have to use AbstractBaseUser and PermissionsMixin to override or customize the user class.
"""

"""
Model manager: we want to use our custom user model with the Django CLI
because django CLI needs a manager to manage the custom users
"""

"""
is_active: wether the user profile is active or not
is_staff: wether the user is a staff member or not
"""

"""
USERNAME_FIELD and REQUIRED_FIELDS are in-built keywords
"""

"""
BaseUserManager is a django class which we inherit to modify or create custom UserManager
"""

"""
normalize_email: in-built function which makes email address case insensitive
set_password(): automatically encrypt the password in to a hash value
"""

"""
user.save(using=self._db): it is for every database
"""

"""
an_apiview: 'Uses HTTP methods as functions (get, post, patch, put, delete)',
            'Is similar to a traditional Django View',
            'Gives you the most control over your logic',
            'Is mapped manually to URLs'
"""

"""
Serializer is a feature from the Django rest framework that allows you to 
easily convert data inputs into Python objects and vice versa.
It's kind of similar to a django form which you define 
and it has the various fields that you want to accept for the input for your api
"""

"""
a_viewset:  'Uses actions (list, create, retrieve, update, partial_update)',
            'Automatically maps to URLS using Routers',
            'Provides more functionality with less code'
"""

"""
ModelSerializer: it uses a meta class to point to a specific model
password: exceptional field because we want to give this field only when user is creating a profile
otherwise user can access the hash value of the password.
So, we have to make it write-only and style for displaying dots or stars instead of password user types
"""

"""
ModelSerializer: uses default create function to create user 
so to override that function by custom user function we need to define create function and points the user
to create_user fuction and return the user created by it
"""

"""
update: ModelSerializer uses update function as default function to update any data
it is okay to pass email and name in this field but we cannot pass password directly without encrypting it.
So, to do that we need to delete the password if it exist in the validated_data and the set again by using
set_password() function as it automatically stores the password in hash valuse
"""

"""
super().update() to pass the values to the existing DRF update() method, to handle updating the remaining fields.
"""

"""
ModelViewSet: extension of the ViewSet 
Just have to specify a serializer_class and a queryset to perform all the CRUD operations of the ViewSet 
"""

"""
If we are using queryset in our view then there is no need to define basename in urls
"""

"""
BasePermission: it is a class which we use for customizing the permissions of a user
Everytime when request is made Django checks has_object_permission.
It passes the request, the view which was called and the object for which we have to check against
"""

"""
ObtainAuthToken: a class offered by django rest framework which generates token(random strings)
these token then includes in the header whenever user logins
"""

"""
perform_create: a function which automatically called whenever there is a post request made
it takes serializer as an argument and then extracts the user from request to save it
"""

